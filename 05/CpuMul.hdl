// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Instruction Decoding
    Not(in=instruction[15], out=ainstruction);
    Not(in=ainstruction, out=cinstruction);

    // Instruction Execution
    Mux16(a=instruction, b=aluout, sel=cinstruction, out=ainput);
    Or(a=ainstruction, b=instruction[5], out=aload);
    ARegister(in=ainput, load=aload, out=registeraout, out[0..14]=addressM);

    Mux16(a=registeraout, b=inM, sel=instruction[12], out=y);
    And(a=cinstruction, b=instruction[4], out=dload);
    DRegister(in=aluout, load=dload, out=x);

    ExtendAlu(x=x, y=y, instruction=instruction[6..14],
    out=outM, out=aluout, zr=zr, ng=ng);

    And(a=cinstruction, b=instruction[3], out=writeM);

    //function(j1, j2, j3, zr, ng) = 1 if the condition is True else 0
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pos);
    And(a=zr, b=instruction[1], out=jeq);
    And(a=ng, b=instruction[2], out=jlt);
    And(a=pos, b=instruction[0], out=jgt);
    Or(a=jgt, b=jlt, out=j1);
    Or(a=j1, b=jeq, out=jmp);
    And(a=cinstruction, b=jmp, out=loadpc);
    Not(in=loadpc, out=incpc);

    // Next Instruction Fetching
    PC(in=registeraout, load=loadpc, inc=incpc, reset=reset,out[0..14]=pc);
}

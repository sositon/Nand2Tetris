// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array TwoToThe; // arr of 2 powers
    static int rec_count;

    /** Initializes the library. */
    function void init() {
    var int i,j;

    let TwoToThe = Array.new(16);
    let i = 0;
    let j = 1;

    while(i<16){
        let TwoToThe[i] = j;
        let i = i+1;
        let j = j+j;
    }
    return;
    }

    /** Returns the absolute value of x.
     16 bit val mst is 0 == positive
     */
    function int abs(int x) {
       if (Math.bit(x,15)){
        return -x;
       }
       return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum,i, shiftedX;
        let i = 0;
        let sum = 0;
        let shiftedX = x;

        while(i < 16){
            if (Math.bit(y,i)){
                let sum = sum + shiftedX;
            }
            let shiftedX = ^shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y){
        let rec_count = 0;
        return Math.divide_help(x, y);
    }
    function int divide_help(int x, int y) {
        var int q;
        var int sign;

        let sign = -1;
        if (((x < 0) & (y < 0)) || ((x > 0) & (y > 0))){
            let sign = 1;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        if( y > x  | y < 0){return 0;}
        let q = Math.divide_help(x, y+y);
        if ((x - rec_count < y))
        {
            if ( sign = 1 ){
                return q+q;
            }
            else{
                return -(q+q);
            }
        }
        else
        {
            let rec_count = y + rec_count;
            if (sign = 1){
                return q+q + 1;
            }
            else{
                return -(q+q) + 1;}
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,cond;
        let y = 0;
        let j = 7;
        while(j>-1){
            let cond = ((y+TwoToThe[j])*(y+TwoToThe[j]));
            if (~((cond > x)) & (cond > 0)){
                let y = y+TwoToThe[j];
            }
            let j = j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }

    /** returns true if i-th bit of x is 1, false otherwise. */
    function boolean bit(int x, int i){
        return ((x & TwoToThe[i]) = TwoToThe[i]);
    }
}

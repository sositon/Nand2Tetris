// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;

    static int Next;
    static int Size;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let Next = 1;
        let Size = 0;
        let freeList = 2048;
        let freeList[Next] = null; // next
        let freeList[Size] = 14335; // heapLength
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

        // init variables
        var Array prev,res;
        var int len;
        var Array runner;

        let runner = freeList;
        if (size < 0){
            do Sys.error(5);
        }

        while(runner[Size] < size){
        if (runner[Next] = null)
            {
                // no alc
                return -1;
            }

            let prev = runner;
            let runner = runner[Next];
        }

        // if no chunk found what to do?
        // change the old block


        let len = runner[Size];
        let res = runner + len - size - 1;
        let res[Size] = size+1;

        if (res = runner){
        let prev[Next] = runner[Next];

        }
        else{
        let runner[Size] = res - runner;
        }

        return (res+1);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeLis

        var int Pointer;
        let Pointer = o - 1;
        let Pointer = freeList;
        let freeList = Pointer;
        return;
    }



    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
	    // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the
        // start of the block, and this can be used to implement Memory.max.
	    var int length, max, i;
	    let length = o[-1];
	    let max = o[0];
	    let i = 0;
	    while (i < length){
	        if (max < o[i]){
	            let max = o[i];
	        }
	        let i = i + 1;
	    }
	    return max;
    }

}

// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static int white ,black;
    static boolean color;
    static Array TwoToThe; // arr of 2 powers

    /** Initializes the Screen. */
    function void init() {
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;

        while (i < 8192){
            let screen[i] = white;
            let i = i +1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }
    /** return x%16. */
    function int mod16(int x){
        return (x & 15);
    }
    function int multiply32(int x){
        var int i;
        let i = 0;
        while (i < 5){
            let x = ^x;
            let i = i + 1;
        }
        return x;
    }
    function int division16(int x){
        var int i;
        let i = 0;
        while (i < 4){
            let x = #x;
            let i = i + 1;
        }
        return x;
    }
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		// For this function, you will need to calculate the value x%16.
		// It should be calculated quickly without using multiplication or
		// division, using exactly one basic math/logical operation.
		// In addition, calculating 16384 + y * 32 + x/16 should not use
		// division or multiplication.
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		// The case where x1 != x2 and y1 != y2 should be implemented without
		// multiplication or division.
		// Also, the case where y1 == y2 can be implemented efficiently by
		// trying to draw as many pixels as possible in a single assignment,
		// similarly to Fill in project 4.

		if (~(x2 - x1 = 0) & ~(y2 - y1 = 0)){
		    do Screen.drawDiagonalLine(x1, y1, x2, y2);
		}
		if (x2 = x1){
		    do Screen.drawHorizontalLine(x1, y1, x2, y2);
		}
		if (y2 = y1){
		    do Screen.drawVerticalLine(x1, y1, x2, y2);
		}

		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)){
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, square_r, tmp;
        let dy = -r;
        let square_r = r*r;
        while (~(dy > r)){
            let tmp = Math.sqrt(square_r - (dy*dy));
            do Screen.drawLine(x - tmp, y + dy, x + tmp, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {

        if(maxLength > 0){
            let str = Array.new(maxLength);
            let length = 0;
        }
        else{
            let maxLength = 1;
            let length = 1;
            let str = Array.new(maxLength);
        }

        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;

    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j > maxLen)){
            return str[j];
        }
        return null;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j > maxLen)){
            let str[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length < maxLen){
          let str[length] = c;
          let length = length + 1;
      }
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0 ){
            let str[length] = null;
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, value;
        var boolean neg;

        if (str[0] = 45){
            let neg = true;
            let i = 1;
        }
        else{
            let neg = false;
            let i = 0;
        }

        let value = 0;
        while(i < length){
            if (isDigit(str[i])){
                let value = (value * 10) + asciiToDigit(str[i]);
                let i = i + 1;
            }
            else{
                let i = length;
            }
        }
        if (neg){
            return -value;
        }
        else{
            return value;
        }
    }

    /** convert ascii value to a digit. */
    method int asciiToDigit(char c){
        return (c - 48);
    }

    /** convert digit to ascii value. */
    method int digitToAscii(char c){
        return (c + 48);
    }

    /** return true if c is a digit, false otherwise. */
    method boolean isDigit(char c){
        if ((c>48) & (c < 57 )){
        return true;
        }
        return false;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean neg;

        let length = 0;  // clear old string

        if (val < 0){
            let neg = true;
            let val = -val;
            do appendChar(45);
        }
        else{
            let neg = false;
        }
        do setIntHelper(val);
        return;
    }
    /** helper function. */
    method void setIntHelper (int val){
        var int last_digit;
        var char c;
        let last_digit = Math.mod(val, 10);
        let c = digitToAscii(last_digit);

        if (val < 10){
            do appendChar(c);
        }
        else{
            do setIntHelper(val / 10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

}
